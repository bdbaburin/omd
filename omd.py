# Guido van Rossum <guido@python.org>
import random


def step1():
    print("–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. " "–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è")
    option = ""
    options = {"–¥–∞": True, "–Ω–µ—Ç": False}
    while option not in options:
        print("–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}".format(*options))
        option = input()

    if options[option]:
        return step2_umbrella()
    return step2_no_umbrella()


def bear_dice(from_chick=False):
    gambling = {"—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ": True, "—á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ": False}
    budget = 100
    print("–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –Ω–∞—à–ª–∞ –º–µ–∂–¥—É –ø–µ—Ä—å—è–º–∏ 100 —Ä—É–±–ª–µ–π.")
    while budget > 0:
        print(f"–°–µ–π—á–∞—Å —É —É—Ç–∫–∏ ü¶Ü {budget} —Ä—É–±–ª–µ–π. ", "–£—Ç–∫–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É: ")
        bet = int(input("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: \n"))
        if bet < 0:
            print("–°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π! ")
            continue
        elif bet == 0:
            print(
                "–ú–µ–¥–≤–µ–¥—å –Ω–µ —Ö–æ—á–µ—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å",
                "–ù–∞–∑–≤–∞–ª—Å—è –≥—Ä—É–∑–¥–µ–º - –ø–æ–ª–µ–∑–∞–π –≤ –∫—É–∑–æ–≤!",
            )
            continue
        elif budget < bet:
            print("–£ —É—Ç–∫–∏ ü¶Ü –Ω–µ—Ç —Ç–∞–∫–∏—Ö –¥–µ–Ω–µ–≥ :( –í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É: ")
            continue
        budget -= bet
        game = ""
        while game not in gambling:
            print(
                "–í—ã–±–µ—Ä–µ—Ç–µ –∏–≥—Ä—É. "
                "–ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤ —á–µ—Ç–Ω–æ–º/–Ω–µ—á–µ—Ç–Ω–æ–º ü¶Ü –ø–æ–ª—É—á–∏—Ç —É–¥–≤–æ–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É.\n"
                "–ü—Ä–∏ –ø–æ–±–µ–¥–µ –≤ —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ ü¶Ü –ø–æ–ª—É—á–∏—Ç —É–ø—è—Ç–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É"
            )
            game = input("–£—Ç–∫–∞ –≤—ã–±—Ä–∞–ª–∞: {} / {}\n".format(*gambling))

        if gambling[game]:
            print("–£—Ç–∫–∞ –≤—ã–±—Ä–∞–ª–∞ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–ø–∞–ª–æ –º–µ–¥–≤–µ–¥—é? ")
            dice_predict = ""
            while not dice_predict.isdecimal():
                dice_predict = input("–í–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–∞–ª–æ –Ω–∞ –∫–æ—Å—Ç–∏: \n")

            dice = random.randint(1, 6)
            print(f"–ú–µ–¥–≤–µ–¥—é –≤—ã–ø–∞–ª–æ {dice}")
            if dice == int(dice_predict):
                budget += 5 * bet
                print("–£—Ä–∞! –£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –≤—ã–∏–≥—Ä–∞–ª–∞! –£—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–≥—Ä—É?")
            else:
                print("–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –ø—Ä–æ–∏–≥—Ä–∞–ª–∞! –£—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–≥—Ä—É?")
        else:
            print(
                "–£—Ç–∫–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ. "
                "–ö–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–ø–∞–ª–æ –º–µ–¥–≤–µ–¥—é?"
            )
            odd = {"—á–µ—Ç–Ω–æ–µ": 0, "–Ω–µ—á–µ—Ç–Ω–æ–µ": 1}
            dice_predict = ""
            while dice_predict not in odd:
                print("–í–≤–µ–¥–∏—Ç–µ, —á—Ç–æ –≤—ã–ø–∞–ª–æ –Ω–∞ –∫–æ—Å—Ç–∏: {}/{}".format(*odd))
                dice_predict = input()

            dice = random.randint(1, 6)
            print(f"–ú–µ–¥–≤–µ–¥—é –≤—ã–ø–∞–ª–æ {dice}")
            if dice % 2 == odd[dice_predict]:
                budget += 2 * bet
                print("–£—Ä–∞! –£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –≤—ã–∏–≥—Ä–∞–ª–∞! –£—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–≥—Ä—É?")
            else:
                print("–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –ø—Ä–æ–∏–≥—Ä–∞–ª–∞! –£—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∏–≥—Ä—É?")
        option = ""
        options = {"–¥–∞": True, "–Ω–µ—Ç": False}
        while option not in options:
            print("–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}".format(*options))
            option = input()
        if options[option]:
            continue
        else:
            break
    else:
        print("–£ —É—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏ –∏ –æ–Ω–∞ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–æ –ø–æ–∫—Ä—è–∫–∞–ª–∞ –¥–æ–º–æ–π...")
    if from_chick:
        if budget >= 150:
            print(f"–£—Ç–∫–∞ –∫—É–ø–∏–ª–∞ –∑–æ–Ω—Ç–∏–∫ ‚òÇÔ∏è –∏ –ø–æ—à–ª–∞ –≤ –±–∞—Ä —Å {budget - 150} —Ä—É–±.")
        else:
            print(
                "–£—Ç–∫–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∑–æ–Ω—Ç–∏–∫ ‚òÇÔ∏è –∏ –æ–Ω–∞ –ø–æ—à–ª–∞ –¥–æ–º–æ–π."
                f"–ó–∞—Ç–æ –º–µ–∂–¥—É –ø–µ—Ä—å–µ–≤ {budget} —Ä—É–±."
            )
    else:
        if 100 < budget:
            print(f"–£—Ç–∫–∞ –≤—ã–∏–≥—Ä–∞–ª–∞ {budget - 100} —Ä—É–±. –∏ –ø–æ—Ç–æ–ø–∞–ª–∞ –≤ –±–∞—Ä!")
        elif 0 < budget and budget <= 100:
            print(
                f"–£—Ç–∫–∞ –ø—Ä–æ–∏–≥—Ä–∞–ª–∞ {-budget + 100} —Ä—É–±.",
                "–∏ –Ω–µ–¥–æ–≤–æ–ª—å–Ω–æ –ø–æ—Ç–æ–ø–∞–ª–∞ –≤ –±–∞—Ä",
            )
        elif option == "–Ω–µ—Ç" and budget == 0:
            print(
                '–£—Ç–∫–∞ –æ–±–∏–∂–µ–Ω–Ω–æ —É—à–ª–∞ –¥–æ–º–æ–π'
            )


def step2_umbrella():
    print(
        "–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü –≤–∑—è–ª–∞ –∑–æ–Ω—Ç–∏–∫ –∏ –≤—ã—à–ª–∞ –Ω–∞ —É–ª–∏—Ü—É. "
        "–ù—É –∏ –¥–æ–∂–¥—å —Ç—É—Ç!!! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –∑–æ–Ω—Ç–∏–∫ –±—ã–ª –≤–∑—è—Ç –Ω–µ –∑—Ä—è (–∫—Ä—è!) "
        "–ö–∞–∫ –ø–æ–π—Ç–∏ —É—Ç–∫–µ ü¶Ü - –¥–ª–∏–Ω–Ω—ã–º –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—É—Ç–µ–º?"
    )
    way = ""
    ways = {"–¥–ª–∏–Ω–Ω—ã–π": True, "–∫–æ—Ä–æ—Ç–∫–∏–π": False}
    while True:
        way = input("–í—ã–±–µ—Ä–µ—Ç–µ: {}/{}\n".format(*ways))
        if way in ways:
            break
    if ways[way]:
        print(
            "–ö ü¶Ü –ø–æ–¥–æ—à–µ–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –º–µ–¥–≤–µ–¥—å –≤ —à–ª—è–ø–µ. "
            "ü¶Ü –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏."
        )
        decisions = {"–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è": True, "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è": False}
        while True:
            decision = input("–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç ü¶Ü: {}/{}\n".format(*decisions))
            if decision in decisions:
                break
        if decisions[decision]:
            return bear_dice()
        else:
            print("–ú–µ–¥–≤–µ–¥—å —Ä–∞—Å—Å–∫–∞–∑–∞–ª –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –Ω—é–∞–Ω—Å. " "–£—Ç–∫–∞  –ø–µ—Ä–µ–¥—É–º–∞–ª–∞?")
            while True:
                decision = input("–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç ü¶Ü: {}/{}\n".format(*decisions))
                if decision in decisions:
                    break
            if decisions[decision]:
                return bear_dice()
            else:
                print(
                    "–£—Ç–∫–∞ ü¶Ü —É—à–ª–∞ –æ—Ç –º–µ–¥–≤–µ–¥—è –∏ –¥–æ–±—Ä–∞–ª–∞—Å—å –¥–æ –±–∞—Ä–∞. "
                    "–ü—É—Å—Ç—å –Ω–∞–∫—Ä—è–∫–∞–µ—Ç—Å—è!!!"
                )
    else:
        print("–£—Ç–∫–∞ ü¶Ü –¥–æ–±—Ä–∞–ª–∞—Å—å –¥–æ –±–∞—Ä–∞. " "–ü—É—Å—Ç—å –Ω–∞–∫—Ä—è–∫–∞–µ—Ç—Å—è!!!")


def step2_no_umbrella():
    print(
        "–ù—É –∏ –¥–æ–∂–¥—å —Ç—É—Ç!!! –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ, –∑–æ–Ω—Ç–∏–∫ –∑—Ä—è –Ω–µ –≤–∑—è–ª–∞( (–∫—Ä—è!) "
        "–£—Ç–∫–∞ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ—à–ª–∞ –ø–æ–¥ –¥–æ–∂–¥–µ–º –∏ –Ω–∞—á–∞–ª–∞—Å—å –≥—Ä–æ–∑–∞. "
        "–ë–µ–∑ –∑–æ–Ω—Ç–∏–∫–∞ —Ç—É—Ç —Å–æ–≤—Å–µ–º –Ω–∏–∫–∞–∫!!! "
        "–ù–µ–¥–∞–ª–µ–∫–æ —É—Ç–∫–∞ —É–≤–∏–¥–µ–ª–∞ –ø–µ—Ç—É—Ö–∞, –ø—Ä–æ–¥–∞—é—â–µ–≥–æ –∑–æ–Ω—Ç–∏–∫–∏."
    )
    print(
        "–í—ã—è—Å–Ω–∏–ª–æ—Å—å, —á—Ç–æ –∑–æ–Ω—Ç–∏–∫ —Å—Ç–æ–∏—Ç 150 —Ä—É–±–ª–µ–π. –£ —É—Ç–∫–∏ –∂–µ –≤—Å–µ–≥–æ 100.",
        "–ü–µ—Ç—É—Ö –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞–ª –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–¥–≤–µ–¥—é, –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏\
            –∑–∞ —É–≥–ª–æ–º –∏ —Å—ã–≥—Ä–∞—Ç—å —Å –Ω–∏–º –≤ –∞–∑–∞—Ä—Ç–Ω—É—é –∏–≥—Ä—É.",
    )
    answers = {"–¥–∞": True, "–Ω–µ—Ç": False}
    ans = ""
    while ans not in answers:
        ans = input("–ü–æ–π—Ç–∏ –∫ –º–µ–¥–≤–µ–¥—é? {} / {}\n".format(*answers))
    if answers[ans]:
        print("–£—Ç–∫–∞ –ø–æ—à–ª–∞ –∑–∞ —É–≥–æ–ª.")
        print("–ö ü¶Ü –ø–æ–¥–æ—à–µ–ª —Å—Ç—Ä–∞–Ω–Ω—ã–π –º–µ–¥–≤–µ–¥—å –≤ —à–ª—è–ø–µ. ")
        return bear_dice(from_chick=True)
    else:
        print("–£—Ç–∫–∞ –≥—Ä—É—Å—Ç–Ω–æ –ø–æ—à–ª–∞ –¥–æ–º–æ–π :(")


if __name__ == "__main__":
    step1()
